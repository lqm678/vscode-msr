{
	"name": "vscode-msr",
	"displayName": "Search code + Replace files + Find definition and references for all types.",
	"description": "Search code + Replace files + Find definition and references in multiple repository paths by msr for all coding languages + configuration + doc files.",
	"author": "qualiu@microsoft.com",
	"version": "2.0.0",
	"icon": "images/vscode-msr-icon.png",
	"license": "completely free",
	"publisher": "qualiu",
	"engines": {
		"vscode": "^1.36.0"
	},
	"categories": [
		"Programming Languages",
		"Other"
	],
	"keywords": [
		"msr",
		"find definition",
		"find reference",
		"search code",
		"search file",
		"replace file",
		"go to definition",
		"jump to definition",
		"find all",
		"find",
		"search",
		"all",
		"definition",
		"reference",
		"C++",
		"CPP",
		"C",
		"C#",
		"CSharp",
		"Java",
		"Scala",
		"Python",
		"TypScript",
		"JavaScript",
		"Vue",
		"PowerShell"
	],
	"activationEvents": [
		"*"
	],
	"homepage": "https://github.com/qualiu/vscode-msr/blob/master/README.md",
	"repository": {
		"type": "git",
		"url": "https://github.com/qualiu/vscode-msr.git"
	},
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "msr.regexFindDefinitionInCurrentFile",
				"title": "Regex find definition in current file.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindReferencesInCurrentFile",
				"title": "Regex find references in current file.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindInAllSmallFiles",
				"title": "Regex find all references in all small files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindInAllProjectFiles",
				"title": "Regex find all references in code + config + doc.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindReferencesInCodeAndConfig",
				"title": "Regex find all references in code + config.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindDefinitionInCodeFiles",
				"title": "Regex find as `class` or `method` definition roughly.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindReferenceInCodeFiles",
				"title": "Regex find all references in code files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindPureReferenceInCodeFiles",
				"title": "Regex find all pure references in code files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindReferencesInDocs",
				"title": "Regex find all references in doc files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindReferencesInConfigFiles",
				"title": "Regex find all references in config files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.findSelectedPlainTextInCodeFiles",
				"title": "Find `selected plain text` in code files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.findSelectedPlainTextInCodeAndConfigFiles",
				"title": "Find `selected plain text` in code + config.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.findSelectedPlainTextInConfigFiles",
				"title": "Find `selected plain text` in config files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.findSelectedPlainTextInDocFiles",
				"title": "Find `selected plain text` in doc files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.findSelectedPlainTextInAllProjectFiles",
				"title": "Find `selected plain text` in code + config + doc.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.findSelectedPlainTextInAllSmallFiles",
				"title": "Find `selected plain text` in all small files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.sortProjectFilesBySize",
				"title": "Sort project files by size.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.sortProjectFilesByTime",
				"title": "Sort project files by write time.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.sortAllFilesBySize",
				"title": "Sort all files by size.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.sortAllFilesByTime",
				"title": "Sort all files by write time.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.cookCmdAlias",
				"title": "Cook alias/doskey: Only general finding commands to 1 file.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.cookCmdAliasByProject",
				"title": "Cook alias/doskey by project: Only finding commands to 1 file.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.cookCmdAliasFiles",
				"title": "Cook script files: Only general finding command alias/doskey.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.cookCmdAliasFilesByProject",
				"title": "Cook script files by project: Only finding command alias/doskey.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.cookCmdAliasDumpWithOthersToFiles",
				"title": "Cook general finding + Dump with other command alias/doskey to script files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.cookCmdAliasDumpWithOthersToFilesByProject",
				"title": "Cook finding by project + Dump with other command alias/doskey to script files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.tmpToggleEnableForFindDefinitionAndReference",
				"title": "Toggle enable finding definition + reference",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			}
		],
		"menus": {
			"editor/context": [
				{
					"when": "config.msr.menu.visible && config.msr.regexFindDefinitionInCurrentFile.menu.visible",
					"command": "msr.regexFindDefinitionInCurrentFile",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.regexFindReferencesInCurrentFile.menu.visible",
					"command": "msr.regexFindReferencesInCurrentFile",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.regexFindInAllSmallFiles.menu.visible",
					"command": "msr.regexFindInAllSmallFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.regexFindInAllProjectFiles.menu.visible",
					"command": "msr.regexFindInAllProjectFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.regexFindReferencesInCodeAndConfig.menu.visible",
					"command": "msr.regexFindReferencesInCodeAndConfig",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.regexFindDefinitionInCodeFiles.menu.visible",
					"command": "msr.regexFindDefinitionInCodeFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.regexFindReferenceInCodeFiles.menu.visible",
					"command": "msr.regexFindReferenceInCodeFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.regexFindPureReferenceInCodeFiles.menu.visible",
					"command": "msr.regexFindPureReferenceInCodeFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.regexFindReferencesInDocs.menu.visible",
					"command": "msr.regexFindReferencesInDocs",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.regexFindReferencesInConfigFiles.menu.visible",
					"command": "msr.regexFindReferencesInConfigFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.findSelectedPlainTextInCodeFiles.menu.visible",
					"command": "msr.findSelectedPlainTextInCodeFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.findSelectedPlainTextInCodeAndConfigFiles.menu.visible",
					"command": "msr.findSelectedPlainTextInCodeAndConfigFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.findSelectedPlainTextInConfigFiles.menu.visible",
					"command": "msr.findSelectedPlainTextInConfigFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.findSelectedPlainTextInDocFiles.menu.visible",
					"command": "msr.findSelectedPlainTextInDocFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.findSelectedPlainTextInAllProjectFiles.menu.visible",
					"command": "msr.findSelectedPlainTextInAllProjectFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.findSelectedPlainTextInAllSmallFiles.menu.visible",
					"command": "msr.findSelectedPlainTextInAllSmallFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.sortProjectFilesBySize.menu.visible",
					"command": "msr.sortProjectFilesBySize",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.sortProjectFilesByTime.menu.visible",
					"command": "msr.sortProjectFilesByTime",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.sortAllFilesBySize.menu.visible",
					"command": "msr.sortAllFilesBySize",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.sortAllFilesByTime.menu.visible",
					"command": "msr.sortAllFilesByTime",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.cookCmdAliasByProject.menu.visible",
					"command": "msr.cookCmdAliasByProject",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.cookCmdAlias.menu.visible",
					"command": "msr.cookCmdAlias",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.cookCmdAliasFiles.menu.visible",
					"command": "msr.cookCmdAliasFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.cookCmdAliasFilesByProject.menu.visible",
					"command": "msr.cookCmdAliasFilesByProject",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.cookCmdAliasDumpWithOthersToFiles.menu.visible",
					"command": "msr.cookCmdAliasDumpWithOthersToFiles",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.cookCmdAliasDumpWithOthersToFilesByProject.menu.visible",
					"command": "msr.cookCmdAliasDumpWithOthersToFilesByProject",
					"group": "msr"
				},
				{
					"when": "config.msr.menu.visible && config.msr.tmpToggleEnableForFindDefinitionAndReference.menu.visible",
					"command": "msr.tmpToggleEnableForFindDefinitionAndReference",
					"group": "msr"
				}
			],
			"commandPalette": [
				{
					"command": "msr.regexFindDefinitionInCurrentFile",
					"group": "msr"
				},
				{
					"command": "msr.regexFindReferencesInCurrentFile",
					"group": "msr"
				},
				{
					"command": "msr.regexFindInAllSmallFiles",
					"group": "msr"
				},
				{
					"command": "msr.regexFindInAllProjectFiles",
					"group": "msr"
				},
				{
					"command": "msr.regexFindReferencesInCodeAndConfig",
					"group": "msr"
				},
				{
					"command": "msr.regexFindDefinitionInCodeFiles",
					"group": "msr"
				},
				{
					"command": "msr.regexFindReferenceInCodeFiles",
					"group": "msr"
				},
				{
					"command": "msr.regexFindPureReferenceInCodeFiles",
					"group": "msr"
				},
				{
					"command": "msr.regexFindReferencesInDocs",
					"group": "msr"
				},
				{
					"command": "msr.regexFindReferencesInConfigFiles",
					"group": "msr"
				},
				{
					"command": "msr.findSelectedPlainTextInCodeFiles",
					"group": "msr"
				},
				{
					"command": "msr.findSelectedPlainTextInCodeAndConfigFiles",
					"group": "msr"
				},
				{
					"command": "msr.findSelectedPlainTextInConfigFiles",
					"group": "msr"
				},
				{
					"command": "msr.findSelectedPlainTextInDocFiles",
					"group": "msr"
				},
				{
					"command": "msr.findSelectedPlainTextInAllProjectFiles",
					"group": "msr"
				},
				{
					"command": "msr.findSelectedPlainTextInAllSmallFiles",
					"group": "msr"
				},
				{
					"command": "msr.sortProjectFilesBySize",
					"group": "msr"
				},
				{
					"command": "msr.sortProjectFilesByTime",
					"group": "msr"
				},
				{
					"command": "msr.sortAllFilesBySize",
					"group": "msr"
				},
				{
					"command": "msr.sortAllFilesByTime",
					"group": "msr"
				},
				{
					"command": "msr.cookCmdAliasByProject",
					"group": "msr"
				},
				{
					"command": "msr.cookCmdAlias",
					"group": "msr"
				},
				{
					"command": "msr.cookCmdAliasFiles",
					"group": "msr"
				},
				{
					"command": "msr.cookCmdAliasFilesByProject",
					"group": "msr"
				},
				{
					"command": "msr.cookCmdAliasDumpWithOthersToFiles",
					"group": "msr"
				},
				{
					"command": "msr.cookCmdAliasDumpWithOthersToFilesByProject",
					"group": "msr"
				},
				{
					"command": "msr.tmpToggleEnableForFindDefinitionAndReference",
					"group": "msr"
				}
			]
		},
		"keybindings": [
			{
				"command": "msr.tmpToggleEnableForFindDefinitionAndReference",
				"key": "Alt+F2",
				"when": "editorTextFocus"
			}
		],
		"configuration": {
			"type": "object",
			"title": "All msr settings",
			"properties": {
				"msr.menu.visible": {
					"type": "boolean",
					"default": true,
					"description": "If false, will hide all `msr` context menus (menu by right-click to prompt) of `Regex find xxx` or `Find plain text`."
				},
				"msr.clearTerminalBeforeExecutingCommands": {
					"type": "boolean",
					"default": false,
					"description": "Clear terminal/console before executing new commands."
				},
				"msr.autoMergeSkipFolders": {
					"type": "boolean",
					"default": true,
					"description": "Auto merge excluded folders from each project's root folder `.vscode/settings.json` file's `search.exclude` + `files.exclude`."
				},
				"msr.initProjectCmdAliasForNewTerminals": {
					"type": "boolean",
					"default": true,
					"description": "Initialize command shortcuts (alias/doskeys) for newly created/opened terminals with a temp file cooked by project settings. (You can run `PowerShell` to change back from `cmd` console on Windows)"
				},
				"msr.overwriteProjectCmdAliasForNewTerminals": {
					"type": "boolean",
					"default": true,
					"description": "Overwrite the default initialized command shortcuts (alias/doskeys) of a project when open a new terminal."
				},
				"msr.tmpToggleEnableForFindDefinitionAndReference.menu.visible": {
					"type": "boolean",
					"default": false,
					"description": "Temporarily toggle enable/disable finding definition/reference for current live vscode."
				},
				"msr.cookCmdAlias.menu.visible": {
					"type": "boolean",
					"default": true,
					"description": "Cook general command alias/doskey (like 'find-def', 'find-doc') to help fast search in/out vscode."
				},
				"msr.cookCmdAliasByProject.menu.visible": {
					"type": "boolean",
					"default": false,
					"description": "Cook command alias/doskey by settings of default + overwritten-by-project to help fast search in/out vscode."
				},
				"msr.cookCmdAliasFiles.menu.visible": {
					"type": "boolean",
					"default": false,
					"description": "Cook script files of general command alias/doskey (like 'find-def', 'find-doc') to help fast search in/out vscode."
				},
				"msr.cookCmdAliasFilesByProject.menu.visible": {
					"type": "boolean",
					"default": false,
					"description": "Cook script files of command alias/doskey by settings of default + overwritten-by-project to help fast search in/out vscode."
				},
				"msr.cookCmdAliasDumpWithOthersToFiles.menu.visible": {
					"type": "boolean",
					"default": false,
					"description": "Cook general shortcuts + Dump with other command alias/doskeys to script files to be used in other scripts or commands."
				},
				"msr.cookCmdAliasDumpWithOthersToFilesByProject.menu.visible": {
					"type": "boolean",
					"default": false,
					"description": "Cook shortcuts by project settings + Dump with other command alias/doskeys to script files to be used in other scripts or commands."
				},
				"msr.regexFindDefinitionInCurrentFile.menu.visible": {
					"type": "boolean",
					"default": true
				},
				"msr.regexFindReferencesInCurrentFile.menu.visible": {
					"type": "boolean",
					"default": true
				},
				"msr.regexFindInAllSmallFiles.menu.visible": {
					"type": "boolean",
					"default": true
				},
				"msr.regexFindInAllProjectFiles.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.regexFindReferencesInCodeAndConfig.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.regexFindDefinitionInCodeFiles.menu.visible": {
					"type": "boolean",
					"default": true
				},
				"msr.regexFindReferenceInCodeFiles.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.regexFindPureReferenceInCodeFiles.menu.visible": {
					"type": "boolean",
					"default": true
				},
				"msr.regexFindReferencesInDocs.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.regexFindReferencesInConfigFiles.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.findSelectedPlainTextInCodeFiles.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.findSelectedPlainTextInCodeAndConfigFiles.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.findSelectedPlainTextInConfigFiles.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.findSelectedPlainTextInDocFiles.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.findSelectedPlainTextInAllProjectFiles.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.findSelectedPlainTextInAllSmallFiles.menu.visible": {
					"type": "boolean",
					"default": true
				},
				"msr.sortProjectFilesBySize.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.sortProjectFilesByTime.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.sortAllFilesBySize.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.sortAllFilesByTime.menu.visible": {
					"type": "boolean",
					"default": false
				},
				"msr.quiet": {
					"type": "boolean",
					"default": true,
					"description": "Don't activate (show) channels: `MSR-Def-Ref` (in `OUTPUT` tab) + `MSR-RUN-CMD` (in `TERMINAL` tab)."
				},
				"msr.enable.findingCommands": {
					"type": "boolean",
					"default": true,
					"description": "Enable finding commands."
				},
				"msr.default.sortResults": {
					"type": "boolean",
					"default": true,
					"description": "Sort matched results of definitions or references."
				},
				"msr.default.removeLowScoreResultsFactor": {
					"type": "number",
					"default": 0.8,
					"description": "Remove low score definition search results (if enabled sortResults) which score lower than average plus this factor. To disable this: set a large value like 10. Overwrite with `msr.{root-folder-name}.removeLowScoreResultsFactor`."
				},
				"msr.default.keepHighScoreResultCount": {
					"type": "number",
					"default": -1,
					"description": "Keep high score result count. Default -1 means keep all results. Overwrite with `msr.{root-folder-name}.keepHighScoreResultCount`."
				},
				"msr.disable.projectRootFolderNamePattern": {
					"type": "string",
					"default": "",
					"description": "Regex pattern of project root folder names to disable finding definition and references."
				},
				"msr.disable.extensionPattern": {
					"type": "string",
					"default": "tsx?|jsx?",
					"description": "Regex pattern of file extensions to disable finding definition and references. Example: tsx?|jsx?|py|java|cpp"
				},
				"msr.disable.findDef.extensionPattern": {
					"type": "string",
					"default": "",
					"description": "Regex pattern of file extensions to disable finding definition. Example: tsx?|jsx?|py|java|cpp"
				},
				"msr.findingCommands.useExtraPaths": {
					"type": "boolean",
					"default": true,
					"description": "Use extra paths for finding commands in context menu or command palette."
				},
				"msr.findReference.useExtraPaths": {
					"type": "boolean",
					"default": false,
					"description": "Use extra paths for finding references."
				},
				"msr.findDefinition.useExtraPaths": {
					"type": "boolean",
					"default": true,
					"description": "Use extra paths for finding definition."
				},
				"msr.enable.useGeneralFindingWhenNoResults": {
					"type": "boolean",
					"default": true,
					"description": "Start general finding commands if not found matched results of `definition` or `reference` etc."
				},
				"msr.enable.definition": {
					"type": "boolean",
					"default": true,
					"description": "Enable finding definitions."
				},
				"msr.enable.reference": {
					"type": "boolean",
					"default": true,
					"description": "Enable finding references."
				},
				"msr.default.maxSearchDepth": {
					"type": "int",
					"default": 16,
					"description": "Maximum search depth (start from input path as depth = 1), will be overwritten if search commands has set `-k {n}`."
				},
				"msr.default.promoteFolderScore": {
					"type": "int",
					"default": 200,
					"description": "Default promotion score for matched folders."
				},
				"msr.default.promotePathScore": {
					"type": "int",
					"default": 200,
					"description": "Default promotion score for matched paths."
				},
				"msr.default.demoteFolderScore": {
					"type": "int",
					"default": 200,
					"description": "Default demotion score for matched folders."
				},
				"msr.default.demotePathScore": {
					"type": "int",
					"default": 200,
					"description": "Default demotion score for matched paths."
				},
				"msr.definition.searchAllRootFolders": {
					"type": "boolean",
					"default": true,
					"description": "Find definition in all root folders of current vscode workspace (if have multiple root folders)."
				},
				"msr.reference.searchAllRootFolders": {
					"type": "boolean",
					"default": true,
					"description": "Find references in all root folders of current vscode workspace (if have multiple root folders)."
				},
				"msr.descendingSortForVSCode": {
					"type": "boolean",
					"default": true,
					"description": "Descending sort result for `Visual Studio Code`."
				},
				"msr.descendingSortForConsoleOutput": {
					"type": "boolean",
					"default": false,
					"description": "Descending sort result for console output channel at bottom of `Visual Studio Code`."
				},
				"msr.reRunSearchInTerminalIfCostLessThan": {
					"type": "number",
					"default": 6.3,
					"description": "Re-run search in a terminal if got multiple results and time cost seconds less than this. Will show colorful + clickable results."
				},
				"msr.default.searchAllFilesForReferences": {
					"type": "boolean",
					"default": false,
					"description": "When finding references, search all file types (code + configuration + document) other than current file type(extension)."
				},
				"msr.default.searchAllFilesForDefinitions": {
					"type": "boolean",
					"default": false,
					"description": "When finding definition, search all file types (code + configuration + document) other than current file type(extension)."
				},
				"msr.default.extraSearchPaths": {
					"type": "string",
					"default": "",
					"description": "Default extra search paths. Use ';' to separate groups (`global-paths` or `root-folder-name=paths` pairs), use ',' to separate paths. You can also set `msr.{root-folder-name}.extraSearchPaths` in your personal settings file like `%APPDATA%\\Code\\User\\settings.json` on Windows (See doc: https://github.com/qualiu/vscode-msr/blob/master/README.md#specific-extra-search-paths-settings)"
				},
				"msr.default.extraSearchPathListFiles": {
					"type": "string",
					"default": "",
					"description": "Default extra search path list files (one path at one line in each file). Use ';' to separate groups (`global-paths` or `root-folder-name=paths` pairs), use ',' to separate paths. (See doc: https://github.com/qualiu/vscode-msr/blob/master/README.md#specific-extra-search-paths-settings)"
				},
				"msr.default.skip.pureReference": {
					"type": "string",
					"default": "^\\s*(#|/|:|\\*|(or|from|import)\\s+)|^.{360,}",
					"description": "Regex pattern to skip junk results like comments when finding references in code files."
				},
				"msr.showInfo": {
					"type": "boolean",
					"default": true,
					"description": "Print extra info like command line."
				},
				"msr.default.listSortingFilesOptions": {
					"type": "boolean",
					"default": "-l -H 10 -T 10",
					"description": "Default list file options. Like listing top 10 and bottom 10 files: -l -H 10 -T 10"
				},
				"msr.debug": {
					"type": "boolean",
					"default": false,
					"description": "Print debug info of msr (for vscode-msr contributors)."
				},
				"msr.default.skipFolders": {
					"type": "string",
					"default": "^([\\.\\$]|(Release|Debug|objd?|bin|node_modules|static|dist|target|(Js)?Packages|\\w+-packages?)$|__pycache__)",
					"description": "Default Regex pattern to skip folders. You can set each project's additional skip patterns: `msr.{root-folder-name}.definition.skipFolders` or `msr.{root-folder-name}.reference.skipFolders` in your personal settings file like `%APPDATA%\\Code\\User\\settings.json` on Windows (See doc: https://github.com/qualiu/vscode-msr/blob/master/README.md#specific-extra-search-paths-settings)."
				},
				"msr.default.allFiles": {
					"type": "string",
					"default": "\\.(cs(html)?|cpp|cxx|h|hpp|cc?|c\\+{2}|\\w+proj|sln|nuspec|config|props|java|scala|py|go|php|vue|tsx?|jsx?|json|ya?ml|xml|ini|md|ipynb)$|^readme|^make\\w+$",
					"description": "Default Regex pattern for files to search."
				},
				"msr.default.codeFiles": {
					"type": "string",
					"default": "\\.(cs(html)?|cpp|cxx|h|hpp|cc?|c\\+{2}|java|scala|py|go|php)$",
					"description": "Default Regex pattern for all code files."
				},
				"msr.default.codeFilesPlusUI": {
					"type": "string",
					"default": "\\.(cs(html)?|cpp|cxx|h|hpp|cc?|c\\+{2}|java|scala|py|go|php|vue|tsx?|jsx?)$",
					"description": "Default Regex pattern for all UI (front-end) code files."
				},
				"msr.default.configFiles": {
					"type": "string",
					"default": "\\.(config|json|ya?ml|xml|ini)$",
					"description": "Default Regex pattern for configuration files."
				},
				"msr.default.docFiles": {
					"type": "string",
					"default": "\\.(md|ipynb)$|^readme",
					"description": "Default Regex pattern for document files."
				},
				"msr.default.codeAndConfig": {
					"type": "string",
					"default": "\\.(cs(html)?|cpp|cxx|h|hpp|cc?|c\\+{2}|vcx?proj|sln|nuspec|config|props|java|scala|py|go|php|vue|tsx?|jsx?|json|ya?ml|xml|ini)$|^make\\w+$",
					"description": "Default Regex pattern for code + configuration files."
				},
				"msr.default.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(cs(html)?|cpp|cxx|h|hpp|cc?|c\\+{2}|vcx?proj|sln|nuspec|config|props|java|scala|py|go|php|vue|tsx?|jsx?|json|ya?ml|xml|ini|md|ipynb)$|^readme|^make\\w+$",
					"description": "Default Regex pattern for code + configuration + document files."
				},
				"msr.default.configAndDocs": {
					"type": "string",
					"default": "\\.(config|json|ya?ml|xml|ini|md|ipynb)$|^readme",
					"description": "Default Regex pattern for configuration + document files."
				},
				"msr.default.skip.definition": {
					"type": "string",
					"default": "^\\s*(return|await|throw|except|raise|new|(el)?if|for|from|val)\\s+|^\\s*p\\w+\\s+%1\\s*\\(",
					"description": "Default Regex pattern to filter non-definitions."
				},
				"msr.default.definition": {
					"type": "string",
					"default": "^\\s*(#\\s*define\\s+|(p\\w+|internal|readonly|const|static)\\s+[\\w\\s]*?)\\b(%1)\\b|^\\s*\\w+[^=\\(\\./#;:]+\\s+(%1)\\s*(?:[\\(\\{:<]|extends|implements|$)",
					"description": "Default Regex pattern to find definitions of a word (class, method, etc.). Must use `%1` to be replaced by word to search."
				},
				"msr.default.reference": {
					"type": "string",
					"default": "\\b%1\\b",
					"description": "Default Regex pattern to find references of a word (class, method, etc.). Must use `%1` to be replaced by word to search."
				},
				"msr.allSmallFiles.extraOptions": {
					"type": "string",
					"default": "-W --s1 1B --s2 1.6MB -I -C -c",
					"description": "Default extra searching options for small files. Will merge `msr.{root-folder-name}.extraOptions` if you set in your personal settings file like `%APPDATA%\\Code\\User\\settings.json` on Windows (See doc: https://github.com/qualiu/vscode-msr/blob/master/README.md#specific-extra-search-paths-settings)."
				},
				"msr.default.scriptFiles": {
					"type": "string",
					"default": "\\.(bat|cmd|psm?1|sh|bash|[kzct]sh)$",
					"description": "Default Regex pattern for script files."
				},
				"msr.cmdAlias.saveFolder": {
					"type": "string",
					"default": "",
					"description": "Save folder for command shortcuts file when cooking. If not set, will use `%USERPROFILE%\\Desktop` (Windows) or `~/` (Linux) for single file, and `%USERPROFILE%\\Desktop\\cmdAlias` or `~/cmdAlias/` for multiple script files."
				},
				"msr.default.extraOptions": {
					"type": "string",
					"default": "--s1 1B --s2 3.6MB -I -C -c",
					"description": "Default extra searching options. Like: -W --xd --xf --s1 1B --s2 3.6MB -I -C -c"
				},
				"msr.definition.extraOptions": {
					"type": "string",
					"default": "--s1 1B --s2 1.6MB -H 60 -J -I -C -c",
					"description": "Default extra searching options for finding definitions: Get top {N} results and jump out. Will merge `msr.{root-folder-name}.extraOptions` if you set in your personal settings file like `%APPDATA%\\Code\\User\\settings.json` on Windows (See doc: https://github.com/qualiu/vscode-msr/blob/master/README.md#specific-extra-search-paths-settings)."
				},
				"msr.reference.extraOptions": {
					"type": "string",
					"default": "--s1 1B --s2 3.6MB -H 360 -J -I -C -c",
					"description": "Default extra searching options for finding references: Get top {N} results and jump out. Will merge `msr.{root-folder-name}.extraOptions` if you set in your personal settings file like `%APPDATA%\\Code\\User\\settings.json` on Windows (See doc: https://github.com/qualiu/vscode-msr/blob/master/README.md#specific-extra-search-paths-settings)."
				},
				"msr.default.isClass": {
					"type": "string",
					"default": "\\b(class|struct|object)\\s+\\w+|\\b(new|is|as)\\s+%1\\b|=\\s*%1\\s*\\(|\\s+%1\\.\\w+\\s*\\(|\\b%1\\s*[<>]|[<\\[]\\s*%1\\b|\\b%1\\s*[\\[>]",
					"description": "Default Regex pattern to check if what-to-find is a `class`."
				},
				"msr.default.isClassOrEnum": {
					"type": "string",
					"default": "[^\\.\\w]([A-Z]\\w+(\\.|::))+\\b%1[^\\.\\w]",
					"description": "Default Regex pattern to check if what-to-find is a `class` or `enum`."
				},
				"msr.default.isMethod": {
					"type": "string",
					"default": "(\\.|->|::|\\s+)\\b%1\\s*\\(|\\b%1\\s*<\\s*\\w+",
					"description": "Default Regex pattern to check if what-to-find is a `method`."
				},
				"msr.default.isMember": {
					"type": "string",
					"default": "\\b[a-z]\\w+\\.%1\\b|\\b[a-z]\\w+(\\.|->|::)\\S*?%1|(\\.|->|::)%1\\b",
					"description": "Default Regex to check if what-to-find is a class `member`."
				},
				"msr.default.isEnumValue": {
					"type": "string",
					"default": "[^\\.\\w][A-Z]\\w+(\\.|->|::)%1\\b(?!\\s*[\\.\\(])",
					"description": "Default Regex to check if what-to-find is an `enum`."
				},
				"msr.default.isConstant": {
					"type": "string",
					"default": "^[A-Z_0-9]+$",
					"description": "Default Regex pattern to check if `current word` is a constant."
				},
				"msr.default.class.definition": {
					"type": "string",
					"default": "^\\s*[\\w\\s]*?\\b(class|struct|enum|interface)\\s+(%1)\\b",
					"description": "Default Regex pattern to search class definitions."
				},
				"msr.default.member.definition": {
					"type": "string",
					"default": "^\\s*(p\\w+|internal|static)\\s+[\\w\\.<,>\\s]*?\\b(%1)\\b",
					"description": "Default Regex pattern to search member definitions."
				},
				"msr.default.constant.definition": {
					"type": "string",
					"default": "^\\s*(%1)\\s*(=|,|$)",
					"description": "Default Regex pattern to search constants definition."
				},
				"msr.default.enum.definition": {
					"type": "string",
					"default": "^\\s*(\\[.*?\\]\\s*)?(%1)\\b(\\s*=\\s*\\w+)?\\s*,?",
					"description": "Default Regex pattern to search `enum` definition."
				},
				"msr.cs.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(cs(html)?|csproj|sln|nuspec|config|props|json|ya?ml|xml|ini|md|ipynb)$",
					"description": "Regex pattern for C# code + configuration + document files."
				},
				"msr.cs.isClass": {
					"type": "string",
					"default": "\\b(class|struct)\\s+\\w+|\\b(new|is|as)\\s+%1\\b|\\s+%1\\.\\w+\\s*\\(|%1\\s*>|\\[\\s*%1\\s*\\(|\\b%1\\s*[\\?\\*]?\\s+\\w+\\S*\\s*[^:]+(,|;|$)",
					"description": "Regex pattern to check if what-to-find is a C# `class`."
				},
				"msr.cs.class.definition": {
					"type": "string",
					"default": "^\\s*[\\w\\s]*?\\b(class|struct|enum|interface)\\s+(%1)\\b",
					"description": "Regex pattern to search C# class definitions."
				},
				"msr.cs.method.definition": {
					"type": "string",
					"default": "^\\s*\\w+[\\w\\[\\]\\.\\(\\)<>,\\s]*?\\s+(%1)\\s*(?:<.+>)?\\s*\\([^;]*$",
					"description": "Regex pattern to search C# method definitions."
				},
				"msr.cs.enum.definition": {
					"type": "string",
					"default": "^\\s*(\\[.*?\\]\\s*)?(%1)\\b(\\s*=\\s*\\w+)?\\s*,?\\s*$",
					"description": "Regex pattern to search C# enum definitions."
				},
				"msr.cs.member.definition": {
					"type": "string",
					"default": "^\\s*(p\\w+|internal|static)\\s+[\\w\\.<,>\\s]*?\\b(%1)\\b",
					"description": "Regex pattern to search C# field or property definitions."
				},
				"msr.cpp.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(cpp|cxx|h|hpp|cc?|c\\+{2}|vcx?proj|sln|nuspec|config|props|json|ya?ml|xml|ini|md|ipynb)$|^make\\w+$",
					"description": "Regex pattern for C++ or C code + configuration + document files."
				},
				"msr.cpp.isClass": {
					"type": "string",
					"default": "\\b(class|struct)\\s+\\w+|\\b(new|is|as)\\s+%1\\b|=\\s*%1\\s*\\(|\\s+%1\\.\\w+\\s*\\(|\\b%1\\s*[<>]|\\[\\s*%1\\s*\\(|\\b%1\\s*[\\*\\&]?\\s+\\w+",
					"description": "Regex pattern to check if what-to-find is a C++ `class`."
				},
				"msr.cpp.constant.definition": {
					"type": "string",
					"default": "^\\s*(%1)\\s*(=|,|$)|^\\s*#define\\s+(%1)\\b",
					"description": "Regex pattern to search C++/C constants definition."
				},
				"msr.cpp.isEnumValue": {
					"type": "string",
					"default": "\\w+::%1\\b(?!\\s*[\\.\\(])",
					"description": "Default Regex to check if what-to-find is a C++ `enum`."
				},
				"msr.cpp.class.definition": {
					"type": "string",
					"default": "^\\s*[\\w\\s]*?\\b(class|struct|enum|interface)\\s+(\\w+\\s+)?\\b(%1)\\b|^\\s*#\\s*define\\s+(%1)\\b",
					"description": "Regex pattern to search C++ or C `class` definition."
				},
				"msr.cpp.method.definition": {
					"type": "string",
					"default": "^\\s*\\w+[\\w<>,\\s:]*?\\b(%1)\\s*\\([^;]*$|^\\s*#\\s*define\\s+(%1)\\b",
					"description": "Regex pattern to search C++ or C `method` definition. Skip head-name case: ^\\s*%1\\(\\s*\\w+[^,]*?\\w+"
				},
				"msr.cpp.enum.definition": {
					"type": "string",
					"default": "^\\s*(\\[.*?\\]\\s*)?(%1)\\b(\\s*=\\s*\\w+)?\\s*,?",
					"description": "Regex pattern to search C++ or C `enum` definition."
				},
				"msr.cpp.member.definition": {
					"type": "string",
					"default": "^\\s*\\w+[\\w:\\.<>\\s]*?\\b(%1)\\s*(=.*?)?;\\s*$",
					"description": "Regex pattern to search C++ or C `member` definition."
				},
				"msr.cpp.member.skip.definition": {
					"type": "string",
					"default": "[\\(\\),]",
					"description": "Regex pattern to skip C++ or C struct or class `member` definition."
				},
				"msr.cpp.skip.definition": {
					"type": "string",
					"default": "^\\s*(return|throw|new|case)\\s+",
					"description": "Regex pattern to filter C++ or C non-definitions."
				},
				"msr.py.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(py|json|ya?ml|xml|ini|md|ipynb)$",
					"description": "Regex pattern for Python code + configuration + document files."
				},
				"msr.py.isMember": {
					"type": "string",
					"default": "\\bself\\.%1\\s*(?!\\()|\\b[a-z]\\w+(\\.|->|::)\\S*?%1|(\\.|->|::)%1\\b",
					"description": "Regex pattern for Python to check if what-to-find is a `member`."
				},
				"msr.py.isClass": {
					"type": "string",
					"default": "\\b(new|is|as)\\s+%1\\b|=\\s*%1\\s*\\(|class\\s+%1\\b|\\b(except|raise)\\s+%1|%1\\.\\w+|^\\s*from\\s+\\S+\\s+import\\s+%1|\\[[\\w,\\s]*?%1|%1[\\w,\\s*]*?\\]",
					"description": "Regex pattern for Python to check if what-to-find is a `class`."
				},
				"msr.py.class.definition": {
					"type": "string",
					"default": "^\\s*class\\s+(%1)\\b",
					"description": "Regex pattern to search Python `class` definition."
				},
				"msr.py.method.definition": {
					"type": "string",
					"default": "^\\s*def\\s+(%1)\\b",
					"description": "Regex pattern to search Python `method` definition."
				},
				"msr.py.enum.definition": {
					"type": "string",
					"default": "^\\s*(%1)\\s*=",
					"description": "Regex pattern to search Python `enum` definition."
				},
				"msr.py.member.definition": {
					"type": "string",
					"default": "^\\s*self\\.(%1)\\s*=|^\\s*def\\s+(%1)\\s*\\(\\s*self\\s*\\)",
					"description": "Regex pattern to search Python `member` definition."
				},
				"msr.java.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(java|scala|json|ya?ml|xml|ini|md|ipynb)$",
					"description": "Regex pattern for Java code + configuration + document files."
				},
				"msr.ui.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(vue|tsx?|jsx?|json|ya?ml|xml|ini|md|ipynb)$",
					"description": "Regex pattern for Front-end code + configuration + document files."
				},
				"msr.ui.definition": {
					"type": "string",
					"default": "^\\s*((p\\w+|internal|readonly|const|static|function)\\s+[\\w\\s]*?)\\b(%1)\\b|^\\s*\\w+[^=\\(\\./#;:]+\\s+(%1)\\s*(?:[\\(\\{:<]|extends|implements|$)",
					"description": "Default Regex pattern to find UI definitions of a word (class, method, etc.). Must use `%1` to be replaced by word to search."
				},
				"msr.ui.skip.definition": {
					"type": "string",
					"default": "^\\s*(return|await|throw|except|raise|new|(el)?if|for|from|val)\\s+",
					"description": "Default Regex pattern to filter non-definitions."
				},
				"msr.ui.class.definition": {
					"type": "string",
					"default": "\\b(class|struct|enum|interface|const)\\s+(%1)\\b",
					"description": "Regex pattern to search UI `class` definition."
				},
				"msr.ui.member.definition": {
					"type": "string",
					"default": "\\b(const|public|private|protected|readonly)\\s+(\\w+\\s)*?(%1)\\b(\\s*:\\s*\\w+)?\\s*[=;]",
					"description": "Regex pattern to search UI `member` definition."
				},
				"msr.ui.method.definition": {
					"type": "string",
					"default": "^[\\w\\s]*?(function|public|private|protected|internal)\\s+\\b(%1)\\b",
					"description": "Regex pattern to search UI `method` definition."
				},
				"msr.ui.method.skip.definition": {
					"type": "string",
					"default": "^\\s*(return|await|throw|except|raise|new|(el)?if|for|from|val)\\s+",
					"description": "Regex pattern to filter non-definitions of UI code."
				},
				"msr.ps.definition": {
					"type": "string",
					"default": "(^\\s*(function|class)|\\[\\w+\\]\\s*)\\s*(%1)\\b|\\s*(%1)\\s*=",
					"description": "Regex pattern to search PowerShell definitions of a function or parameter."
				},
				"msr.ps.skip.definition": {
					"type": "string",
					"default": "Export-ModuleMember\\s+-\\w+"
				},
				"msr.sh.definition": {
					"type": "string",
					"default": "(^\\s*function|\\[\\w+\\]\\s*)\\s*(%1)\\b|\\s*(%1)\\s*=",
					"description": "Regex pattern to search bash/sh file definitions of a function or parameter."
				},
				"msr.fileExtensionMap.batch": {
					"description": "Batch file extensions.",
					"type": "string",
					"default": "bat cmd"
				},
				"msr.batch.definition": {
					"description": "Regex pattern to search batch file definitions of a function or variable.",
					"type": "string",
					"default": "^\\s*:\\s*(%1)\\b|(^|\\s)[Ss][Ee][Tt]\\s+(/[aApP]\\s+)?\\\"?(%1)="
				},
				"msr.batch.skip.definition": {
					"type": "string",
					"default": ""
				},
				"msr.fileExtensionMap.cpp": {
					"description": "C++/C file extensions.",
					"type": "string",
					"default": "c++ cpp cxx cc c hpp h"
				},
				"msr.fileExtensionMap.java": {
					"description": "Java/Scala file extensions.",
					"type": "string",
					"default": "java scala"
				},
				"msr.fileExtensionMap.cs": {
					"description": "C# file extensions.",
					"type": "string",
					"default": "cs cshtml"
				},
				"msr.fileExtensionMap.ui": {
					"description": "UI file extensions.",
					"type": "string",
					"default": "js ts jsx tsx vue"
				},
				"msr.fileExtensionMap.ps": {
					"description": "PowerShell file extensions.",
					"type": "string",
					"default": "ps1 psm1"
				},
				"msr.fileExtensionMap.sh": {
					"description": "Bash/sh file extensions.",
					"type": "string",
					"default": "sh bash ksh zsh csh tsh"
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/mocha": "^5.2.6",
		"@types/node": "^10.12.21",
		"@types/vscode": "^1.36.0",
		"glob": "^7.1.4",
		"mocha": "^7.1.2",
		"tslint": "^5.12.1",
		"typescript": "^3.3.1",
		"vscode-test": "^1.0.0-next.0"
	}
}
