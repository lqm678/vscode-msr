{
	"name": "vscode-msr",
	"displayName": "Find definition and references for all types.",
	"description": "Find definition and references in multiple repository paths by msr for all coding languages + configuration + readme files.",
	"author": "qualiu@microsoft.com",
	"version": "1.0.3",
	"icon": "images/vscode-msr-icon.png",
	"license": "completely free",
	"publisher": "qualiu",
	"engines": {
		"vscode": "^1.36.0"
	},
	"categories": [
		"Programming Languages",
		"Other"
	],
	"keywords": [
		"msr",
		"find definition",
		"find references",
		"find all",
		"find",
		"search",
		"jump",
		"all",
		"definition",
		"references",
		"C++",
		"C",
		"C#",
		"CSharp",
		"Java",
		"Scala",
		"Python",
		"TypScript",
		"JavaScript",
		"Vue"
	],
	"activationEvents": [
		"*"
	],
	"homepage": "https://github.com/qualiu/vscode-msr/blob/master/README.md",
	"repository": {
		"type": "git",
		"url": "https://github.com/qualiu/vscode-msr.git"
	},
	"main": "./out/extension.js",
	"contributes": {
		"commands": [
			{
				"command": "msr.regexFindInAllSmallFiles",
				"title": "Regex find all references in all small files including code + configuration + docs.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindInAllProjectFiles",
				"title": "Regex find all references in code + configuration + docs.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindInCodeAndConfig",
				"title": "Regex find all references in code + configuration files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindDefinition",
				"title": "Regex find definitions of a `class` or `method` roughly in all code files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindReference",
				"title": "Regex find all references in code files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindInDocFiles",
				"title": "Regex find all references in doc files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.regexFindInConfigFiles",
				"title": "Regex find all references in configuration files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.findSelectedPlainTextInAllProjectFiles",
				"title": "Find `selected plain text` in all code + configuration + doc files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.findSelectedPlainTextInAllSmallFiles",
				"title": "Find `selected plain text` in all small files.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.sortProjectFilesBySize",
				"title": "Sort project files by file size.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.sortProjectFilesByTime",
				"title": "Sort project files by modify time.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.sortAllFilesBySize",
				"title": "Sort all files by file size.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			},
			{
				"command": "msr.sortAllFilesByTime",
				"title": "Sort all files by modify time.",
				"category": "msr",
				"icon": {
					"dark": "images/vscode-msr-small.svg",
					"light": "images/vscode-msr-small.svg"
				}
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "msr.regexFindInAllSmallFiles",
					"group": "msr"
				},
				{
					"command": "msr.regexFindInAllProjectFiles",
					"group": "msr"
				},
				{
					"command": "msr.regexFindInCodeAndConfig",
					"group": "msr"
				},
				{
					"command": "msr.regexFindDefinition",
					"group": "msr"
				},
				{
					"command": "msr.regexFindReference",
					"group": "msr"
				},
				{
					"command": "msr.regexFindInDocFiles",
					"group": "msr"
				},
				{
					"command": "msr.regexFindInConfigFiles",
					"group": "msr"
				},
				{
					"command": "msr.findSelectedPlainTextInAllProjectFiles",
					"group": "msr"
				},
				{
					"command": "msr.findSelectedPlainTextInAllSmallFiles",
					"group": "msr"
				},
				{
					"command": "msr.sortProjectFilesBySize",
					"group": "msr"
				},
				{
					"command": "msr.sortProjectFilesByTime",
					"group": "msr"
				},
				{
					"command": "msr.sortAllFilesBySize",
					"group": "msr"
				},
				{
					"command": "msr.sortAllFilesByTime",
					"group": "msr"
				}
			]
		},
		"configuration": {
			"type": "object",
			"title": "File Peek extension configuration",
			"properties": {
				"msr.quiet": {
					"type": "boolean",
					"default": false,
					"description": "Quiet mode: Don't show(activate) output channel each time (and also don't show re-running terminal if no results)"
				},
				"msr.enable.findingCommands": {
					"type": "boolean",
					"default": true,
					"description": "Enable finding commands."
				},
				"msr.default.sortResults": {
					"type": "boolean",
					"default": true,
					"description": "Sort matched results of definitions or references."
				},
				"msr.default.removeLowScoreResultsFactor": {
					"type": "number",
					"default": 0.8,
					"description": "Remove low score results (if enabled sortResults) which score lower than average plus this factor. (To disable this: set a large value like 10)"
				},
				"msr.findingCommands.useExtraPaths": {
					"type": "boolean",
					"default": true,
					"description": "Use extra paths as same as finding references and definitions for finding commands."
				},
				"msr.enable.useGeneralFindingWhenNoResults": {
					"type": "boolean",
					"default": true,
					"description": "Start general finding commands if not found matched results of `definition` or `reference` etc."
				},
				"msr.enable.definition": {
					"type": "boolean",
					"default": true,
					"description": "Enable finding definitions."
				},
				"msr.enable.reference": {
					"type": "boolean",
					"default": true,
					"description": "Enable finding references."
				},
				"msr.default.maxSearchDepth": {
					"type": "int",
					"default": 16,
					"description": "Maximum search depth (start from input path as depth = 1), will be overwritten if search commands has set `-k {n}`."
				},
				"msr.descendingSortForVSCode": {
					"type": "boolean",
					"default": true,
					"description": "Descending sort result for `Visual Studio Code`."
				},
				"msr.descendingSortForConsoleOutput": {
					"type": "boolean",
					"default": false,
					"description": "Descending sort result for console output channel at bottom of `Visual Studio Code`."
				},
				"msr.reRunSearchInTerminalIfCostLessThan": {
					"type": "number",
					"default": 3.3,
					"description": "Re-run search in a terminal if got multiple results (to get colorful + clickable results) and time cost seconds less than this."
				},
				"msr.default.searchAllFilesForReferences": {
					"type": "boolean",
					"default": false,
					"description": "When finding references, search code + configuration + document files."
				},
				"msr.default.searchAllFilesForDefinitions": {
					"type": "boolean",
					"default": false,
					"description": "When finding definitions, search code + configuration + document files."
				},
				"msr.default.extraSearchPaths": {
					"type": "string",
					"default": "",
					"description": "Default global extra search paths. Multiple paths use ',' to separate. (To search external repositories, dependency sources, or libraries)"
				},
				"msr.default.extraSearchPathListFiles": {
					"type": "string",
					"default": "",
					"description": "Default global extra search path list files (one path at one line in each file). Multiple paths use ',' to separate."
				},
				"msr.showInfo": {
					"type": "boolean",
					"default": true,
					"description": "Print extra info like command line."
				},
				"msr.default.listSortingFilesOptions": {
					"type": "boolean",
					"default": "-l -H 10 -T 10",
					"description": "Default list file options."
				},
				"msr.debug": {
					"type": "boolean",
					"default": false,
					"description": "Print debug info."
				},
				"msr.default.skipFolders": {
					"type": "string",
					"default": "^([\\.\\$]\\w+|Release|Debug|node_modules|static|dist|target|site-packages|packages|JsPackages|Monaco|CBT$|obj$|bin$|build$|npm-package|__pycache__)",
					"description": "Default Regex pattern to skip folders."
				},
				"msr.default.allFiles": {
					"type": "string",
					"default": "\\.(cs\\w*|nuspec|config|cpp|cxx|h|hpp|cc?|c\\+{2}|vcx?proj|sln|java|scala|py|vue|tsx?|jsx?|json|ya?ml|xml|ini|md)$|^readme|^make\\w*",
					"description": "Default Regex pattern for files to search."
				},
				"msr.default.codeFiles": {
					"type": "string",
					"default": "\\.(cs\\w*|cpp|cxx|h|hpp|cc?|c\\+{2}|vcx?proj|sln|java|scala|py)$|^make\\w*",
					"description": "Default Regex pattern for all code files."
				},
				"msr.default.codeFilesPlusUI": {
					"type": "string",
					"default": "\\.(cs\\w*|cpp|cxx|h|hpp|cc?|c\\+{2}|vcx?proj|sln|java|scala|py|vue|tsx?|jsx?)$|^make\\w*",
					"description": "Default Regex pattern for all UI (front-end) code files."
				},
				"msr.default.configFiles": {
					"type": "string",
					"default": "\\.(config|json|ya?ml|xml|ini)$",
					"description": "Default Regex pattern for configuration files."
				},
				"msr.default.docFiles": {
					"type": "string",
					"default": "\\.(md)$|^readme",
					"description": "Default Regex pattern for document files."
				},
				"msr.default.codeAndConfig": {
					"type": "string",
					"default": "\\.(cs\\w*|nuspec|config|cpp|cxx|h|hpp|cc?|c\\+{2}|vcx?proj|sln|java|scala|py|vue|tsx?|jsx?|json|ya?ml|xml|ini)$|^make\\w*",
					"description": "Default Regex pattern for code + configuration files."
				},
				"msr.default.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(cs\\w*|nuspec|config|cpp|cxx|h|hpp|cc?|c\\+{2}|vcx?proj|sln|java|scala|py|vue|tsx?|jsx?|json|ya?ml|xml|ini|md)$|^readme|^make\\w*",
					"description": "Default Regex pattern for code + configuration + document files."
				},
				"msr.default.configAndDocs": {
					"type": "string",
					"default": "\\.(config|json|ya?ml|xml|ini|md)$|^readme",
					"description": "Default Regex pattern for configuration + document files."
				},
				"msr.default.skip.definition": {
					"type": "string",
					"default": "^\\s*(return|await|throw|except|raise|new|(el)?if|for|from|val)\\s+|^\\s*p\\w+\\s+(%1)\\s*\\(",
					"description": "Default Regex pattern to filter non-definitions."
				},
				"msr.default.definition": {
					"type": "string",
					"default": "^\\s*#\\s*define\\s+(%1)\\b|^\\s*\\w+[^=\\(\\./#;:]+\\s+(%1)\\s*(?:[\\(\\{:<]|extends|implements|$)",
					"description": "Default Regex pattern to find definitions of a word (class, method, etc.). Must use `(%1)` to be replaced by word to search."
				},
				"msr.default.reference": {
					"type": "string",
					"default": "\\b(%1)\\b",
					"description": "Default Regex pattern to find references of a word (class, method, etc.). Must use `(%1)` to be replaced by word to search."
				},
				"msr.allSmallFiles.extraOptions": {
					"type": "string",
					"default": "-I -C --s1 1B --s2 1.0MB -c Search %1 in all small files",
					"description": "Default extra searching options for small files."
				},
				"msr.default.extraOptions": {
					"type": "string",
					"default": "-I -C --s1 1B --s2 12.0MB -c Search %1",
					"description": "Default extra searching options."
				},
				"msr.definition.extraOptions": {
					"type": "string",
					"default": "--s1 1B --s2 1.6MB -H 30 -J -I -C -c Search %1",
					"description": "Default extra searching options for finding definitions: Get top {N} results and jump out."
				},
				"msr.reference.extraOptions": {
					"type": "string",
					"default": "--s1 1B --s2 12.0MB -H 300 -J -I -C -c Search %1",
					"description": "Default extra searching options for finding references: Get top {N} results and jump out."
				},
				"msr.default.isClass": {
					"type": "string",
					"default": "\\b(class|struct|object)\\s+\\w+|\\b(new|is|as)\\s+(%1)\\b|\\s+(%1)\\.\\w+\\s*\\(|\\b(%1)\\s*[<>]|[<\\[]\\s*(%1)\\b|\\b(%1)\\s*[\\[>]",
					"description": "Default Regex pattern to check if what-to-find is a `class`."
				},
				"msr.default.isClassOrEnum": {
					"type": "string",
					"default": "[^\\.\\w]([A-Z]\\w+(\\.|::))+\\b(%1)[^\\.\\w]",
					"description": "Default Regex pattern to check if what-to-find is a `class` or `enum`."
				},
				"msr.default.isMethod": {
					"type": "string",
					"default": "(\\.|->|::|\\s+)\\b(%1)\\s*\\(|\\b(%1)\\s*[<>]",
					"description": "Default Regex pattern to check if what-to-find is a `method`."
				},
				"msr.default.isMember": {
					"type": "string",
					"default": "\\b[a-z]\\w+\\.(%1)\\b|\\b[a-z]\\w+(\\.|->|::)\\S*?(%1)|(\\.|->|::)(%1)\\b",
					"description": "Default Regex to check if what-to-find is a class `member`."
				},
				"msr.default.isEnumValue": {
					"type": "string",
					"default": "[^\\.\\w][A-Z]\\w+(\\.|->|::)(%1)\\b(?!\\s*[\\.\\(])",
					"description": "Default Regex to check if what-to-find is an `enum`."
				},
				"msr.default.isConstant": {
					"type": "string",
					"default": "^[A-Z_0-9]+$",
					"description": "Default Regex pattern to check if `current word` is a constant."
				},
				"msr.default.class.definition": {
					"type": "string",
					"default": "^\\s*[\\w\\s]*?\\b(class|struct|enum|interface)\\s+(%1)\\b",
					"description": "Default Regex pattern to search class definitions."
				},
				"msr.default.member.definition": {
					"type": "string",
					"default": "^\\s*(p\\w+|internal|static)\\s+[\\w\\.<,>\\s]*?\\b(%1)\\b",
					"description": "Default Regex pattern to search member definitions."
				},
				"msr.default.constant.definition": {
					"type": "string",
					"default": "^\\s*(%1)\\s*(=|,|$)",
					"description": "Default Regex pattern to search constants definition."
				},
				"msr.default.enum.definition": {
					"type": "string",
					"default": "^\\s*(\\[.*?\\]\\s*)?(%1)\\b(\\s*=\\s*\\w+)?\\s*,?",
					"description": "Default Regex pattern to search `enum` definition."
				},
				"msr.cs.codeFiles": {
					"type": "string",
					"default": "\\.(cs\\w*)$",
					"description": "Regex pattern for C# code files."
				},
				"msr.cs.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(cs\\w*|sln|nuspec|config|json|ya?ml|xml|ini|md)$",
					"description": "Regex pattern for C# code + configuration + document files."
				},
				"msr.cs.isClass": {
					"type": "string",
					"default": "\\b(class|struct)\\s+\\w+|\\b(new|is|as)\\s+(%1)\\b|\\s+(%1)\\.\\w+\\s*\\(|(%1)\\s*>|\\[\\s*(%1)\\s*\\(|\\b(%1)\\s*[\\?\\*]?\\s+\\w+\\S*\\s*[^:]+(,|;|$)",
					"description": "Regex pattern to check if what-to-find is a C# `class`."
				},
				"msr.cs.class.definition": {
					"type": "string",
					"default": "^\\s*[\\w\\s]*?\\b(class|struct|enum|interface)\\s+(%1)\\b",
					"description": "Regex pattern to search C# class definitions."
				},
				"msr.cs.method.definition": {
					"type": "string",
					"default": "^\\s*\\w+[\\w\\[\\]\\.\\(\\)<>,\\s]*?\\s+(%1)\\s*(<.+>)?\\s*\\([^;]*$",
					"description": "Regex pattern to search C# method definitions."
				},
				"msr.cs.enum.definition": {
					"type": "string",
					"default": "^\\s*(\\[.*?\\]\\s*)?(%1)\\b(\\s*=\\s*\\w+)?\\s*,?\\s*$",
					"description": "Regex pattern to search C# enum definitions."
				},
				"msr.cs.member.definition": {
					"type": "string",
					"default": "^\\s*(p\\w+|internal|static)\\s+[\\w\\.<,>\\s]*?\\b(%1)\\b",
					"description": "Regex pattern to search C# field or property definitions."
				},
				"msr.cpp.codeFiles": {
					"type": "string",
					"default": "\\.(cpp|cxx|h|hpp|cc?|c\\+{2})$",
					"description": "Regex pattern for C++ or C code files."
				},
				"msr.cpp.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(cpp|cxx|h|hpp|cc?|c\\+{2}|vcx?proj|sln|nuspec|config|json|ya?ml|xml|ini|md)$|^make\\w*",
					"description": "Regex pattern for C++ or C code + configuration + document files."
				},
				"msr.cpp.isClass": {
					"type": "string",
					"default": "\\b(class|struct)\\s+\\w+|\\b(new|is|as)\\s+(%1)\\b|\\s+(%1)\\.\\w+\\s*\\(|\\b(%1)\\s*[<>]|\\[\\s*(%1)\\s*\\(|\\b(%1)\\s*[\\*\\&]?\\s+\\w+",
					"description": "Regex pattern to check if what-to-find is a C++ `class`."
				},
				"msr.cpp.constant.definition": {
					"type": "string",
					"default": "^\\s*(%1)\\s*(=|,|$)|^\\s*#define\\s+(%1)\\b",
					"description": "Regex pattern to search C++/C constants definition."
				},
				"msr.cpp.isEnumValue": {
					"type": "string",
					"default": "\\w+::(%1)\\b(?!\\s*[\\.\\(])",
					"description": "Default Regex to check if what-to-find is a C++ `enum`."
				},
				"msr.cpp.class.definition": {
					"type": "string",
					"default": "^\\s*[\\w\\s]*?\\b(class|struct|enum|interface)\\s+(\\w+\\s+)?\\b(%1)\\b|^\\s*#\\s*define\\s+(%1)\\b",
					"description": "Regex pattern to search C++ or C `class` definition."
				},
				"msr.cpp.method.definition": {
					"type": "string",
					"default": "^\\s*\\w+[\\w<>,\\s:]*?\\b(%1)\\s*\\([^;]*$|^\\s*#\\s*define\\s+(%1)\\b",
					"description": "Regex pattern to search C++ or C `method` definition. Skip head-name case: ^\\s*(%1)\\(\\s*\\w+[^,]*?\\w+"
				},
				"msr.cpp.enum.definition": {
					"type": "string",
					"default": "^\\s*(\\[.*?\\]\\s*)?(%1)\\b(\\s*=\\s*\\w+)?\\s*,?",
					"description": "Regex pattern to search C++ or C `enum` definition."
				},
				"msr.cpp.member.definition": {
					"type": "string",
					"default": "^\\s*\\w+[\\w:\\.<>\\s]*?\\b(%1)\\s*(=.*?)?;\\s*$",
					"description": "Regex pattern to search C++ or C `member` definition."
				},
				"msr.cpp.member.skip.definition": {
					"type": "string",
					"default": "[\\(\\),]",
					"description": "Regex pattern to skip C++ or C struct or class `member` definition."
				},
				"msr.cpp.skip.definition": {
					"type": "string",
					"default": "^\\s*(return|throw|new|case)\\s+",
					"description": "Regex pattern to filter C++ or C non-definitions."
				},
				"msr.py.codeFiles": {
					"type": "string",
					"default": "\\.(py)$",
					"description": "Regex pattern for Python code files."
				},
				"msr.py.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(py|json|ya?ml|xml|ini|md)$",
					"description": "Regex pattern for Python code + configuration + document files."
				},
				"msr.py.extraSearchPaths": {
					"type": "string",
					"default": "",
					"description": "Python extra search paths. Multiple paths use ',' to separate. (To search external repositories, dependency sources, or libraries)"
				},
				"msr.py.extraSearchPathListFiles": {
					"type": "string",
					"default": "",
					"description": "Python extra search path list files (one path at one line in each file). Multiple paths use ',' to separate."
				},
				"msr.py.isMember": {
					"type": "string",
					"default": "\\bself\\.(%1)\\s*(?!\\()|\\b[a-z]\\w+(\\.|->|::)\\S*?(%1)|(\\.|->|::)(%1)\\b",
					"description": "Regex pattern for Python to check if what-to-find is a `member`."
				},
				"msr.py.isClass": {
					"type": "string",
					"default": "\\b(new|is|as)\\s+(%1)\\b|class\\s+(%1)\\b|\\b(except|raise)\\s+(%1)|(%1)\\.\\w+|^\\s*from\\s+\\S+\\s+import\\s+(%1)|\\[[\\w,\\s]*?(%1)|(%1)[\\w,\\s*]*?\\]",
					"description": "Regex pattern for Python to check if what-to-find is a `class`."
				},
				"msr.py.class.definition": {
					"type": "string",
					"default": "^\\s*class\\s+(%1)\\b",
					"description": "Regex pattern to search Python `class` definition."
				},
				"msr.py.method.definition": {
					"type": "string",
					"default": "^\\s*def\\s+(%1)\\b",
					"description": "Regex pattern to search Python `method` definition."
				},
				"msr.py.enum.definition": {
					"type": "string",
					"default": "^\\s*(%1)\\s*=",
					"description": "Regex pattern to search Python `enum` definition."
				},
				"msr.py.member.definition": {
					"type": "string",
					"default": "^\\s*self\\.(%1)\\s*=|^\\s*def\\s+(%1)\\s*\\(\\s*self\\s*\\)",
					"description": "Regex pattern to search Python `member` definition."
				},
				"msr.java.codeFiles": {
					"type": "string",
					"default": "\\.(java|scala)$",
					"description": "Regex pattern for Java code files."
				},
				"msr.java.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(java|scala|json|ya?ml|xml|ini|md)$",
					"description": "Regex pattern for Java code + configuration + document files."
				},
				"msr.ui.codeFiles": {
					"type": "string",
					"default": "\\.(vue|tsx?|jsx?)$",
					"description": "Regex pattern for Front-end code files."
				},
				"msr.ui.codeAndConfigDocs": {
					"type": "string",
					"default": "\\.(vue|tsx?|jsx?|json|ya?ml|xml|ini|md)$",
					"description": "Regex pattern for Front-end code + configuration + document files."
				},
				"msr.ui.class.definition": {
					"type": "string",
					"default": "\\b(class|struct|enum|interface|const)\\s+(%1)\\b",
					"description": "Regex pattern to search UI `class` definition."
				},
				"msr.ui.method.definition": {
					"type": "string",
					"default": "^\\s*(p\\w+|function)\\s+(%1)\\b",
					"description": "Regex pattern to search UI `method` definition."
				},
				"msr.ui.member.definition": {
					"type": "string",
					"default": "\\b(const|public|private|protected|readonly)\\s+(\\w+\\s)*?(%1)\\b(\\s*:\\s*\\w+)?\\s*[=;]",
					"description": "Regex pattern to search UI `member` definition."
				}
			}
		}
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/mocha": "^5.2.6",
		"@types/node": "^10.12.21",
		"@types/vscode": "^1.36.0",
		"glob": "^7.1.4",
		"mocha": "^6.1.4",
		"typescript": "^3.3.1",
		"tslint": "^5.12.1",
		"vscode-test": "^1.0.0-next.0"
	}
}